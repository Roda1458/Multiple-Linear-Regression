{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOUftYl+0Rw2TeIYtG2Mwbu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Single Linear Regression"],"metadata":{"id":"LbPXHjdADp_n"}},{"cell_type":"markdown","source":["Use 50-startup dataset to predict the profit for a startup using single and multiple regression (['R&D Spend', 'Administration', 'Marketing Spend', 'State', 'Profit'])\n","Provide accuracy, and R2 value for the same.\n","Dataset Link: https://www.kaggle.com/code/cundratjuninhokuth/multiple-linear-regression-predict-profit\n"],"metadata":{"id":"5Zw8WgOEGsOL"}},{"cell_type":"code","source":["# Importing the libraries\n","import numpy as np\n","import pandas as pd\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score"],"metadata":{"id":"_6noJpfsDx-t","executionInfo":{"status":"ok","timestamp":1725360056421,"user_tz":420,"elapsed":1085,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Importing the dataset\n","dataset = pd.read_csv('50_Startups.csv')"],"metadata":{"id":"Z8EqlNYfD4Pw","executionInfo":{"status":"ok","timestamp":1725360057555,"user_tz":420,"elapsed":17,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Extracting features and target variable\n","# Using only 'R&D Spend' for single regression\n","X = dataset[['R&D Spend']].values\n","y = dataset['Profit'].values"],"metadata":{"id":"SxkyS--LD91z","executionInfo":{"status":"ok","timestamp":1725360057555,"user_tz":420,"elapsed":17,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Normalizing the feature and target variable using MinMaxScaler\n","scaler_X = MinMaxScaler()\n","scaler_y = MinMaxScaler()\n","\n","X = scaler_X.fit_transform(X)\n","y = scaler_y.fit_transform(y.reshape(-1, 1)).flatten()"],"metadata":{"id":"bimYENoLEFJP","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":17,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Splitting the dataset into Training set and Test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"],"metadata":{"id":"jXaqNJqEEPBg","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":17,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Training the Single Linear Regression model on the Training set\n","regressor = LinearRegression()\n","regressor.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"h_vUOO3METbT","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":17,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"af74911c-363a-4704-cea6-50dacfef307d"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred = regressor.predict(X_test)"],"metadata":{"id":"RoXrOlkEEajf","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":16,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Calculating R-squared\n","r2 = r2_score(y_test, y_pred)"],"metadata":{"id":"oAcb-n6XEfnd","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":16,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Displaying the results\n","print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))  # Predictions vs Actual\n","print(f'R-squared: {r2:.2f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FfYll_TxElLJ","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":16,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"7ccc8f15-9e98-44a7-aef1-5e11f7ac337e"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.50673308 0.49893437]\n"," [0.67276239 0.72968626]\n"," [0.67871443 0.74017475]\n"," [0.32373581 0.3554301 ]\n"," [0.92582942 0.99317808]\n"," [0.53577623 0.50865352]\n"," [0.28698476 0.37474659]\n"," [0.48316153 0.46627976]\n"," [0.54482553 0.53874658]\n"," [0.87147412 0.85317138]]\n","R-squared: 0.95\n"]}]},{"cell_type":"markdown","source":["Multiple linear regression"],"metadata":{"id":"LwY3uTEyE65t"}},{"cell_type":"code","source":["# Importing the libraries\n","import numpy as np\n","import pandas as pd\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score\n"],"metadata":{"id":"XJjSxcfsFuFT","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":13,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Importing the dataset\n","dataset = pd.read_csv('50_Startups.csv')\n"],"metadata":{"id":"KLvj2Xh3FzmL","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":13,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Extracting features and target variable\n","X = dataset.iloc[:, :-1].values\n","y = dataset.iloc[:, -1].values"],"metadata":{"id":"FTMwUdbZF5Bi","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":13,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Encoding categorical data\n","ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')\n","X = np.array(ct.fit_transform(X))\n"],"metadata":{"id":"yN9wypgmF9J1","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":13,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# Normalizing the features and target variable using MinMaxScaler\n","scaler_X = MinMaxScaler()\n","scaler_y = MinMaxScaler()\n","\n","X = scaler_X.fit_transform(X)\n","y = scaler_y.fit_transform(y.reshape(-1, 1)).flatten()\n"],"metadata":{"id":"9gmWzP7qGC5D","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":12,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["# Splitting the dataset into the Training set and Test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"],"metadata":{"id":"vb8xAsxSGSXn","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":12,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# Training the Multiple Linear Regression model on the Training set\n","regressor = LinearRegression()\n","regressor.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"yUQnBVOuGWqF","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":12,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"5e80826e-6e09-4960-916c-eb0e56e1307f"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred = regressor.predict(X_test)\n","np.set_printoptions(precision=2)\n","print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)), 1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zRxLhR2BGbCB","executionInfo":{"status":"ok","timestamp":1725360057556,"user_tz":420,"elapsed":11,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"51a6f96b-ddee-46e0-9315-4ed0e210b240"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.5  0.5 ]\n"," [0.66 0.73]\n"," [0.66 0.74]\n"," [0.32 0.36]\n"," [0.92 0.99]\n"," [0.57 0.51]\n"," [0.3  0.37]\n"," [0.47 0.47]\n"," [0.56 0.54]\n"," [0.86 0.85]]\n"]}]},{"cell_type":"code","source":["# Calculating R-squared\n","r2 = r2_score(y_test, y_pred)\n","print(f'R-squared: {r2:.2f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BSQ2k15yGgrJ","executionInfo":{"status":"ok","timestamp":1725360057557,"user_tz":420,"elapsed":10,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"c1b6937f-656e-47f9-ac63-9729225cda9d"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared: 0.93\n"]}]},{"cell_type":"markdown","source":["prediction model for predicting Price"],"metadata":{"id":"Wi1m7BZcDyyl"}},{"cell_type":"markdown","source":["Consider only the below columns and prepare a prediction model for predicting Price.\n","Corolla[c(\"Price\",\"Age_08_04\",\"KM\",\"HP\",\"cc\",\"Doors\",\"Gears\",\"Quarterly_Tax\",\"Weight\")]\n","Provide accuracy, and R2 value for the same.\n","Dataset Link: https://www.kaggle.com/datasets/klkwak/toyotacorollacsv?select=ToyotaCorolla.csv\n"],"metadata":{"id":"pSFmILamGl6R"}},{"cell_type":"code","source":["# Import necessary libraries\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n"],"metadata":{"id":"jVhuywB9D0Rl","executionInfo":{"status":"ok","timestamp":1725360059170,"user_tz":420,"elapsed":1620,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Load the dataset from the local path\n","dataset_path = '/content/ToyotaCorolla.csv'\n","df = pd.read_csv(dataset_path)\n"],"metadata":{"id":"zdMvlUzuEz1Z","executionInfo":{"status":"ok","timestamp":1725360059170,"user_tz":420,"elapsed":14,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Display the first few rows of the dataframe\n","df.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":776},"id":"94mwnTaqE8R-","executionInfo":{"status":"ok","timestamp":1725360059170,"user_tz":420,"elapsed":14,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"cd18642e-ef77-4002-bb2d-06f87eb2827f"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Id                                           Model  Price  Age_08_04  \\\n","0   1   TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors  13500         23   \n","1   2   TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors  13750         23   \n","2   3  ?TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors  13950         24   \n","3   4   TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors  14950         26   \n","4   5     TOYOTA Corolla 2.0 D4D HATCHB SOL 2/3-Doors  13750         30   \n","\n","   Mfg_Month  Mfg_Year     KM Fuel_Type  HP  Met_Color  ...  Central_Lock  \\\n","0         10      2002  46986    Diesel  90          1  ...             1   \n","1         10      2002  72937    Diesel  90          1  ...             1   \n","2          9      2002  41711    Diesel  90          1  ...             0   \n","3          7      2002  48000    Diesel  90          0  ...             0   \n","4          3      2002  38500    Diesel  90          0  ...             1   \n","\n","   Powered_Windows  Power_Steering  Radio  Mistlamps  Sport_Model  \\\n","0                1               1      0          0            0   \n","1                0               1      0          0            0   \n","2                0               1      0          0            0   \n","3                0               1      0          0            0   \n","4                1               1      0          1            0   \n","\n","   Backseat_Divider  Metallic_Rim  Radio_cassette  Tow_Bar  \n","0                 1             0               0        0  \n","1                 1             0               0        0  \n","2                 1             0               0        0  \n","3                 1             0               0        0  \n","4                 1             0               0        0  \n","\n","[5 rows x 37 columns]"],"text/html":["\n","  <div id=\"df-d33a1f7f-655b-4f30-8932-7c8fb563fdfb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>Model</th>\n","      <th>Price</th>\n","      <th>Age_08_04</th>\n","      <th>Mfg_Month</th>\n","      <th>Mfg_Year</th>\n","      <th>KM</th>\n","      <th>Fuel_Type</th>\n","      <th>HP</th>\n","      <th>Met_Color</th>\n","      <th>...</th>\n","      <th>Central_Lock</th>\n","      <th>Powered_Windows</th>\n","      <th>Power_Steering</th>\n","      <th>Radio</th>\n","      <th>Mistlamps</th>\n","      <th>Sport_Model</th>\n","      <th>Backseat_Divider</th>\n","      <th>Metallic_Rim</th>\n","      <th>Radio_cassette</th>\n","      <th>Tow_Bar</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors</td>\n","      <td>13500</td>\n","      <td>23</td>\n","      <td>10</td>\n","      <td>2002</td>\n","      <td>46986</td>\n","      <td>Diesel</td>\n","      <td>90</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors</td>\n","      <td>13750</td>\n","      <td>23</td>\n","      <td>10</td>\n","      <td>2002</td>\n","      <td>72937</td>\n","      <td>Diesel</td>\n","      <td>90</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>?TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors</td>\n","      <td>13950</td>\n","      <td>24</td>\n","      <td>9</td>\n","      <td>2002</td>\n","      <td>41711</td>\n","      <td>Diesel</td>\n","      <td>90</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors</td>\n","      <td>14950</td>\n","      <td>26</td>\n","      <td>7</td>\n","      <td>2002</td>\n","      <td>48000</td>\n","      <td>Diesel</td>\n","      <td>90</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>TOYOTA Corolla 2.0 D4D HATCHB SOL 2/3-Doors</td>\n","      <td>13750</td>\n","      <td>30</td>\n","      <td>3</td>\n","      <td>2002</td>\n","      <td>38500</td>\n","      <td>Diesel</td>\n","      <td>90</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 37 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d33a1f7f-655b-4f30-8932-7c8fb563fdfb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d33a1f7f-655b-4f30-8932-7c8fb563fdfb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d33a1f7f-655b-4f30-8932-7c8fb563fdfb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8d6060be-248f-4fad-8f9b-7f1cd8e81e1a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d6060be-248f-4fad-8f9b-7f1cd8e81e1a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8d6060be-248f-4fad-8f9b-7f1cd8e81e1a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Select relevant columns\n","df = df[[\"Price\", \"Age_08_04\", \"KM\", \"HP\", \"cc\", \"Doors\", \"Gears\", \"Quarterly_Tax\", \"Weight\"]]\n"],"metadata":{"id":"dMT_TcGqFaum","executionInfo":{"status":"ok","timestamp":1725360059171,"user_tz":420,"elapsed":14,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Handle missing values by dropping rows with missing values\n","df = df.dropna()\n"],"metadata":{"id":"zaTsc0q5FhCO","executionInfo":{"status":"ok","timestamp":1725360059171,"user_tz":420,"elapsed":13,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["# Convert categorical variables (e.g., Doors and Gears) to numerical\n","df['Doors'] = df['Doors'].astype(int)\n","df['Gears'] = df['Gears'].astype(int)\n"],"metadata":{"id":"tF6hhR93FlSG","executionInfo":{"status":"ok","timestamp":1725360059171,"user_tz":420,"elapsed":13,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# Define features (X) and target (y)\n","X = df.drop(\"Price\", axis=1)\n","y = df[\"Price\"]\n","\n"],"metadata":{"id":"KyvBVNNxFpFC","executionInfo":{"status":"ok","timestamp":1725360059171,"user_tz":420,"elapsed":13,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"b4J7PC41F-Vg","executionInfo":{"status":"ok","timestamp":1725360059171,"user_tz":420,"elapsed":13,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# Initialize and train the linear regression model\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"PD6fha5-GCtR","executionInfo":{"status":"ok","timestamp":1725360059171,"user_tz":420,"elapsed":13,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"69dff5a9-9100-4879-ecbc-cbb9a445f8c3"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# Make predictions\n","y_pred = model.predict(X_test)\n"],"metadata":{"id":"X3v2RKZqGHQI","executionInfo":{"status":"ok","timestamp":1725360059171,"user_tz":420,"elapsed":12,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["# Calculate performance metrics\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","\n","print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n","print(f\"R-squared (R2) value: {r2:.2f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d4RDD7GhGUFN","executionInfo":{"status":"ok","timestamp":1725360059171,"user_tz":420,"elapsed":12,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"9b299fec-344e-4b08-a073-6394cd343ee8"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error (MSE): 1950244.99\n","R-squared (R2) value: 0.85\n"]}]},{"cell_type":"code","source":["# Plot residuals\n","residuals = y_test - y_pred\n","sns.scatterplot(x=y_pred, y=residuals)\n","plt.xlabel('Predicted Price')\n","plt.ylabel('Residuals')\n","plt.title('Residuals vs Predicted Price')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"a7FKf_L6Ga68","executionInfo":{"status":"ok","timestamp":1725360059171,"user_tz":420,"elapsed":10,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"b59de0fc-c4fd-466b-9d9c-28bd868250dc"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}